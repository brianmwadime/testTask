/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Deposited = ContractEventLog<{
  depositor: string;
  multisig: string;
  token: string;
  amount: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type MultisigUpdated = ContractEventLog<{
  multisig: string;
  0: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type PaymentTokensWhitelistAdded = ContractEventLog<{
  tokens: [string, string][];
  0: [string, string][];
}>;
export type PaymentTokensWhitelsitRemoved = ContractEventLog<{
  tokens: string[];
  0: string[];
}>;

export interface PaymentsRegistry extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): PaymentsRegistry;
  clone(): PaymentsRegistry;
  methods: {
    addPaymentTokensWhitelist(
      tokens_: [string, number | string | BN][]
    ): NonPayableTransactionObject<boolean>;

    deposit(
      token: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    depositorPayments(
      depositor: string,
      index: number | string | BN
    ): NonPayableTransactionObject<[string, string, string]>;

    depositorPaymentsCount(
      depositor: string
    ): NonPayableTransactionObject<string>;

    depositorPaymentsList(
      depositor: string,
      offset: number | string | BN,
      limit: number | string | BN
    ): NonPayableTransactionObject<[string, string, string][]>;

    depositorTotalPaymentAmount(
      depositor: string,
      token: string
    ): NonPayableTransactionObject<string>;

    multisig(): NonPayableTransactionObject<string>;

    owner(): NonPayableTransactionObject<string>;

    paymentTokenMinDepositAmount(
      arg0: string
    ): NonPayableTransactionObject<string>;

    paymentTokens(
      index: number | string | BN
    ): NonPayableTransactionObject<string>;

    paymentTokensContains(token: string): NonPayableTransactionObject<boolean>;

    paymentTokensCount(): NonPayableTransactionObject<string>;

    paymentTokensList(
      offset: number | string | BN,
      limit: number | string | BN
    ): NonPayableTransactionObject<string[]>;

    paymentTokensWhitelist(
      index: number | string | BN
    ): NonPayableTransactionObject<string>;

    paymentTokensWhitelistContains(
      token: string
    ): NonPayableTransactionObject<boolean>;

    paymentTokensWhitelistCount(): NonPayableTransactionObject<string>;

    paymentTokensWhitelistList(
      offset: number | string | BN,
      limit: number | string | BN
    ): NonPayableTransactionObject<string[]>;

    removePaymentTokensWhitelist(
      tokens_: string[]
    ): NonPayableTransactionObject<boolean>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    totalPaymentAmount(arg0: string): NonPayableTransactionObject<string>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    updateMultisig(multisig_: string): NonPayableTransactionObject<boolean>;
  };
  events: {
    Deposited(cb?: Callback<Deposited>): EventEmitter;
    Deposited(options?: EventOptions, cb?: Callback<Deposited>): EventEmitter;

    MultisigUpdated(cb?: Callback<MultisigUpdated>): EventEmitter;
    MultisigUpdated(
      options?: EventOptions,
      cb?: Callback<MultisigUpdated>
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    PaymentTokensWhitelistAdded(
      cb?: Callback<PaymentTokensWhitelistAdded>
    ): EventEmitter;
    PaymentTokensWhitelistAdded(
      options?: EventOptions,
      cb?: Callback<PaymentTokensWhitelistAdded>
    ): EventEmitter;

    PaymentTokensWhitelsitRemoved(
      cb?: Callback<PaymentTokensWhitelsitRemoved>
    ): EventEmitter;
    PaymentTokensWhitelsitRemoved(
      options?: EventOptions,
      cb?: Callback<PaymentTokensWhitelsitRemoved>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Deposited", cb: Callback<Deposited>): void;
  once(
    event: "Deposited",
    options: EventOptions,
    cb: Callback<Deposited>
  ): void;

  once(event: "MultisigUpdated", cb: Callback<MultisigUpdated>): void;
  once(
    event: "MultisigUpdated",
    options: EventOptions,
    cb: Callback<MultisigUpdated>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(
    event: "PaymentTokensWhitelistAdded",
    cb: Callback<PaymentTokensWhitelistAdded>
  ): void;
  once(
    event: "PaymentTokensWhitelistAdded",
    options: EventOptions,
    cb: Callback<PaymentTokensWhitelistAdded>
  ): void;

  once(
    event: "PaymentTokensWhitelsitRemoved",
    cb: Callback<PaymentTokensWhitelsitRemoved>
  ): void;
  once(
    event: "PaymentTokensWhitelsitRemoved",
    options: EventOptions,
    cb: Callback<PaymentTokensWhitelsitRemoved>
  ): void;
}
